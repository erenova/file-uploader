// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  folders  Folder[]
  files    File[]
  shares   Share[]
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  parentFolder   Folder? @relation("Subfolders", fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId String?

  subfolders Folder[] @relation("Subfolders")

  files File[]

  // Share functionality
  shares Share[]
}

model Share {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  accessCount Int       @default(0)

  // The user who created the share
  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  // The shared resource - either a file or folder
  file   File?   @relation(fields: [fileId], references: [id])
  fileId String?

  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId String?

  @@index([createdById])
  @@index([fileId])
  @@index([folderId])
}

model File {
  id         String   @id @default(uuid())
  name       String
  size       Int
  url        String
  mimeType   String
  uploadedAt DateTime @default(now())

  uploadedBy   User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById Int

  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String?

  // Share functionality
  shares Share[]

  @@index([folderId])
  @@index([uploadedById])
}

<div
  id="itemContextMenu"
  class="absolute hidden bg-white border border-gray-200 rounded-xl shadow-lg z-50 w-48 py-1"
>
  <button
    id="detailsItem"
    class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm"
  >
    Details
  </button>
  <button
    id="renameItem"
    class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm"
  >
    Rename
  </button>
  <button
    id="shareItem"
    class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm text-indigo-600"
  >
    Share
  </button>
  <button
    id="deleteItem"
    class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm text-red-600"
  >
    Delete
  </button>
</div>

<!-- Share Modal -->
<div id="shareModal" class="fixed z-50 inset-0 hidden">
  <div class="fixed inset-0 bg-gray-900 bg-opacity-50"></div>
  <div class="relative z-50 max-w-lg mx-auto mt-20 px-4">
    <div class="bg-white rounded-xl shadow-lg p-6">
      <!-- Header -->
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium">
          Share
          <span id="shareName" class="font-semibold text-indigo-600"></span>
        </h3>
        <button id="closeShare" class="text-gray-400 hover:text-gray-500">
          <svg
            class="h-6 w-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>

      <!-- Mascot Image -->
      <div class="flex justify-center items-center mb-6">
        <img
          src="/img/senseiShare.png"
          alt="Sensei Share Mascot"
          class="w-24"
        />
      </div>

      <!-- Expiry Select -->
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Expire After</label
        >
        <select
          id="shareExpiry"
          class="w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-1"
        >
          <option value="">Never</option>
          <option value="1">1 day</option>
          <option value="7">7 days</option>
          <option value="30">30 days</option>
          <option value="90">90 days</option>
        </select>
      </div>

      <!-- Share URL Display -->
      <div id="shareUrlContainer" class="hidden mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1"
          >Share URL</label
        >
        <div class="flex gap-2">
          <input
            type="text"
            id="shareUrl"
            readonly
            class="flex-1 rounded-lg border-gray-300 bg-gray-50"
          />
          <button
            id="copyShareUrl"
            class="px-3 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            Copy
          </button>
        </div>
      </div>

      <!-- Footer Buttons -->
      <div class="flex justify-end gap-2">
        <button
          id="cancelShare"
          class="px-4 py-2 text-gray-700 hover:text-gray-900"
        >
          Cancel
        </button>
        <button
          id="createShare"
          class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
        >
          Create Share Link
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  const contextMenu = document.getElementById("itemContextMenu");
  const renameBtn = document.getElementById("renameItem");
  const deleteBtn = document.getElementById("deleteItem");
  const deleteModal = document.getElementById("deleteConfirmModal");
  const confirmDeleteForm = document.getElementById("confirmDeleteForm");
  const cancelDeleteBtn = document.getElementById("cancelDelete");
  const detailsBtn = document.getElementById("detailsItem");

  let selectedItem = {
    id: null,
    type: null,
    name: "",
    element: null,
  };

  document.querySelectorAll(".item-card").forEach((card) => {
    let longPressTimer;
    let hasMoved = false;

    card.addEventListener("touchstart", (e) => {
      hasMoved = false;
      longPressTimer = setTimeout(() => {
        if (!hasMoved) {
          e.preventDefault();
          handleContextMenu(e, card);
        }
      }, 500);
    });

    card.addEventListener("touchmove", () => {
      hasMoved = true;
      clearTimeout(longPressTimer);
    });

    card.addEventListener("touchend", () => {
      clearTimeout(longPressTimer);
    });

    card.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      e.stopPropagation();
      handleContextMenu(e, card);
    });
  });

  function handleContextMenu(e, card) {
    selectedItem.id = card.dataset.id;
    selectedItem.type = card.dataset.type;
    selectedItem.name = card.dataset.name;
    selectedItem.element = card;

    const shareBtn = document.getElementById("shareItem");
    const detailsBtn = document.getElementById("detailsItem");

    if (shareBtn) shareBtn.style.display = "block";
    if (detailsBtn)
      detailsBtn.style.display =
        selectedItem.type === "file" ? "block" : "none";

    const rect = card.getBoundingClientRect();
    const x = e.type.startsWith("touch") ? e.touches[0].clientX : e.clientX;
    const y = e.type.startsWith("touch") ? e.touches[0].clientY : e.clientY;

    const menuWidth = contextMenu.offsetWidth;
    const menuHeight = contextMenu.offsetHeight;
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;

    const left = Math.min(x, windowWidth - menuWidth);
    const top = Math.min(y, windowHeight - menuHeight);

    contextMenu.style.top = `${top}px`;
    contextMenu.style.left = `${left}px`;
    contextMenu.classList.remove("hidden");
  }

  document.addEventListener("click", (e) => {
    if (!contextMenu.contains(e.target)) {
      contextMenu.classList.add("hidden");
    }
  });

  document.addEventListener("touchstart", (e) => {
    if (!contextMenu.contains(e.target)) {
      contextMenu.classList.add("hidden");
    }
  });

  renameBtn.addEventListener("click", () => {
    contextMenu.classList.add("hidden");
    if (!selectedItem.element) return;

    const nameP = selectedItem.element.querySelector("p");
    const input = document.createElement("input");
    input.type = "text";
    input.value = selectedItem.name.replace(/\.[^/.]+$/, "");
    input.className =
      "mt-1 w-full text-center px-2 py-1 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500";

    nameP.replaceWith(input);
    input.focus();

    input.addEventListener("blur", () => {
      const newName = input.value.trim();
      if (newName && newName !== selectedItem.name) {
        fetch(`/${selectedItem.type}/rename/${selectedItem.id}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name: newName }),
        }).then((res) => {
          if (res.ok) window.location.reload();
          else alert("Rename failed");
        });
      } else {
        input.replaceWith(nameP);
      }
    });

    input.addEventListener("keydown", (e) => {
      if (e.key === "Enter") input.blur();
      if (e.key === "Escape") input.replaceWith(nameP);
    });
  });

  deleteBtn.addEventListener("click", () => {
    contextMenu.classList.add("hidden");
    updateDeleteModal(selectedItem.type, selectedItem.name);
    confirmDeleteForm.action = `/${selectedItem.type}/delete/${selectedItem.id}`;
    deleteModal.classList.remove("hidden");
    deleteModal.classList.add("flex");
  });

  cancelDeleteBtn.addEventListener("click", () => {
    deleteModal.classList.remove("flex");
    deleteModal.classList.add("hidden");
  });

  detailsBtn.addEventListener("click", () => {
    contextMenu.classList.add("hidden");
    if (selectedItem.type === "file") {
      window.location.href = `/file/details/${selectedItem.id}`;
    }
  });

  // Share functionality
  const shareModal = document.getElementById("shareModal");
  const shareBtn = document.getElementById("shareItem");
  const closeShareBtn = document.getElementById("closeShare");
  const cancelShareBtn = document.getElementById("cancelShare");
  const createShareBtn = document.getElementById("createShare");
  const shareExpiry = document.getElementById("shareExpiry");
  const shareUrlContainer = document.getElementById("shareUrlContainer");
  const shareUrl = document.getElementById("shareUrl");
  const copyShareUrl = document.getElementById("copyShareUrl");
  const shareName = document.getElementById("shareName");

  shareBtn.addEventListener("click", () => {
    contextMenu.classList.add("hidden");
    shareName.textContent = selectedItem.name;
    shareUrlContainer.classList.add("hidden");
    shareUrl.value = "";
    createShareBtn.classList.remove("hidden");
    copyShareUrl.disabled = true;
    shareModal.classList.remove("hidden");
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !shareModal.classList.contains("hidden")) {
      shareModal.classList.add("hidden");
    }
  });

  const shareModalOverlay = shareModal.querySelector(
    ".fixed.inset-0.bg-gray-900",
  );
  if (shareModalOverlay) {
    shareModalOverlay.addEventListener("click", () => {
      shareModal.classList.add("hidden");
    });
  }

  [closeShareBtn, cancelShareBtn].forEach((btn) => {
    btn.addEventListener("click", () => {
      shareModal.classList.add("hidden");
    });
  });

  shareExpiry.addEventListener("change", () => {
    shareUrlContainer.classList.add("hidden");
    shareUrl.value = "";
    createShareBtn.classList.remove("hidden");
    copyShareUrl.disabled = true;
  });

  createShareBtn.addEventListener("click", async () => {
    try {
      await window.loadingManager.show("Initializing secure share...");

      const response = await fetch("/share/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          type: selectedItem.type,
          resourceId: selectedItem.id,
          expiresInDays: shareExpiry.value ? parseInt(shareExpiry.value) : null,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create share");
      }

      const data = await response.json();

      await window.loadingManager.show("Encoding the path of wisdom...");
      await new Promise((resolve) => setTimeout(resolve, 800));

      await window.loadingManager.show("Finalizing secret passage...");
      await new Promise((resolve) => setTimeout(resolve, 400));

      shareUrl.value = window.location.origin + "/share/" + data.share.id;
      shareUrlContainer.classList.remove("hidden");
      createShareBtn.classList.add("hidden");
      copyShareUrl.disabled = false;

      await window.loadingManager.hide();
      showNotification(
        "success",
        "Success",
        "A shareable scroll has been etched — deliver it wisely!",
      );

      copyShareUrl.addEventListener("click", () => {
        shareUrl.select();
        document.execCommand("copy");
        showNotification(
          "success",
          "Success",
          "Copied. One path, one purpose — guide it to those you trust.",
        );
      });
    } catch (error) {
      console.error("Share creation failed:", error);
      showNotification("error", "Error", "Failed to create share link");
      await window.loadingManager.hide();
    }
  });
</script>
